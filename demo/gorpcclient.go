// this file was auto generated by gotsrpc https://github.com/foomo/gotsrpc
package demo

import (
	tls "crypto/tls"
	nested "github.com/foomo/gotsrpc/demo/nested"
	gorpc "github.com/valyala/gorpc"
)

type DemoGoRPCClient struct {
	Client *gorpc.Client
}

func NewDemoGoRPCClient(addr string, tlsConfig *tls.Config) *DemoGoRPCClient {
	client := &DemoGoRPCClient{}
	if tlsConfig == nil {
		client.Client = gorpc.NewTCPClient(addr)
	} else {
		client.Client = gorpc.NewTLSClient(addr, tlsConfig)
	}
	return client
}

func (c *DemoGoRPCClient) Start() {
	c.Client.Start()
}

func (c *DemoGoRPCClient) Stop() {
	c.Client.Stop()
}

func (c *DemoGoRPCClient) ExtractAddress(person *Person) (addr *Address, e *Err, clientErr error) {
	req := DemoExtractAddressRequest{Person: person}
	rpcCallRes, rpcCallErr := c.Client.Call(req)
	if rpcCallErr != nil {
		clientErr = rpcCallErr
		return
	}
	response := rpcCallRes.(DemoExtractAddressResponse)
	return response.Addr, response.E, nil
}

func (c *DemoGoRPCClient) GiveMeAScalar() (amount nested.Amount, wahr nested.True, hier ScalarInPlace, clientErr error) {
	req := DemoGiveMeAScalarRequest{}
	rpcCallRes, rpcCallErr := c.Client.Call(req)
	if rpcCallErr != nil {
		clientErr = rpcCallErr
		return
	}
	response := rpcCallRes.(DemoGiveMeAScalarResponse)
	return response.Amount, response.Wahr, response.Hier, nil
}

func (c *DemoGoRPCClient) Hello(name string) (retHello_0 string, retHello_1 *Err, clientErr error) {
	req := DemoHelloRequest{Name: name}
	rpcCallRes, rpcCallErr := c.Client.Call(req)
	if rpcCallErr != nil {
		clientErr = rpcCallErr
		return
	}
	response := rpcCallRes.(DemoHelloResponse)
	return response.RetHello_0, response.RetHello_1, nil
}

func (c *DemoGoRPCClient) MapCrap() (crap map[string][]int, clientErr error) {
	req := DemoMapCrapRequest{}
	rpcCallRes, rpcCallErr := c.Client.Call(req)
	if rpcCallErr != nil {
		clientErr = rpcCallErr
		return
	}
	response := rpcCallRes.(DemoMapCrapResponse)
	return response.Crap, nil
}

func (c *DemoGoRPCClient) Nest() (retNest_0 *nested.Nested, clientErr error) {
	req := DemoNestRequest{}
	rpcCallRes, rpcCallErr := c.Client.Call(req)
	if rpcCallErr != nil {
		clientErr = rpcCallErr
		return
	}
	response := rpcCallRes.(DemoNestResponse)
	return response.RetNest_0, nil
}

func (c *DemoGoRPCClient) TestScalarInPlace() (retTestScalarInPlace_0 ScalarInPlace, clientErr error) {
	req := DemoTestScalarInPlaceRequest{}
	rpcCallRes, rpcCallErr := c.Client.Call(req)
	if rpcCallErr != nil {
		clientErr = rpcCallErr
		return
	}
	response := rpcCallRes.(DemoTestScalarInPlaceResponse)
	return response.RetTestScalarInPlace_0, nil
}

type FooGoRPCClient struct {
	Client *gorpc.Client
}

func NewFooGoRPCClient(addr string, tlsConfig *tls.Config) *FooGoRPCClient {
	client := &FooGoRPCClient{}
	if tlsConfig == nil {
		client.Client = gorpc.NewTCPClient(addr)
	} else {
		client.Client = gorpc.NewTLSClient(addr, tlsConfig)
	}
	return client
}

func (c *FooGoRPCClient) Start() {
	c.Client.Start()
}

func (c *FooGoRPCClient) Stop() {
	c.Client.Stop()
}

func (c *FooGoRPCClient) Hello(number int64) (retHello_0 int, clientErr error) {
	req := FooHelloRequest{Number: number}
	rpcCallRes, rpcCallErr := c.Client.Call(req)
	if rpcCallErr != nil {
		clientErr = rpcCallErr
		return
	}
	response := rpcCallRes.(FooHelloResponse)
	return response.RetHello_0, nil
}
