// this file was auto generated by gotsrpc https://github.com/foomo/gotsrpc
package demo

import (
	tls "crypto/tls"
	nested "github.com/foomo/gotsrpc/demo/nested"
	gorpc "github.com/valyala/gorpc"
)

type ServiceGoRPCClient struct {
	client *gorpc.Client
}

func NewServiceGoRPCClient(addr string, tlsConfig *tls.Config) *ServiceGoRPCClient {
	client := &ServiceGoRPCClient{}
	if tlsConfig == nil {
		client.client = gorpc.NewTCPClient(addr)
	} else {
		client.client = gorpc.NewTLSClient(addr, tlsConfig)
	}
	client.Start()
	return client
}

func (c *ServiceGoRPCClient) Start() {
	c.client.Start()
}

func (c *ServiceGoRPCClient) Stop() {
	c.client.Stop()
}

func (c *ServiceGoRPCClient) ExtractAddress(person *Person) (addr *Address, e *Err, clientErr error) {
	req := ExtractAddressRequest{Person: person}
	res, err := c.client.Call(req)
	if err != nil {
		clientErr = err
		return
	}
	response := res.(ExtractAddressResponse)
	return response.Addr, response.E, nil
}

func (c *ServiceGoRPCClient) GiveMeAScalar() (amount nested.Amount, wahr nested.True, hier ScalarInPlace, clientErr error) {
	req := GiveMeAScalarRequest{}
	res, err := c.client.Call(req)
	if err != nil {
		clientErr = err
		return
	}
	response := res.(GiveMeAScalarResponse)
	return response.Amount, response.Wahr, response.Hier, nil
}

func (c *ServiceGoRPCClient) Hello(name string) (reply string, err *Err, clientErr error) {
	req := HelloRequest{Name: name}
	res, err := c.client.Call(req)
	if err != nil {
		clientErr = err
		return
	}
	response := res.(HelloResponse)
	return response.Reply, response.Err, nil
}

func (c *ServiceGoRPCClient) Nest() (retNest_0 *nested.Nested, clientErr error) {
	req := NestRequest{}
	res, err := c.client.Call(req)
	if err != nil {
		clientErr = err
		return
	}
	response := res.(NestResponse)
	return response.RetNest_0, nil
}

func (c *ServiceGoRPCClient) TestScalarInPlace() (retTestScalarInPlace_0 ScalarInPlace, clientErr error) {
	req := TestScalarInPlaceRequest{}
	res, err := c.client.Call(req)
	if err != nil {
		clientErr = err
		return
	}
	response := res.(TestScalarInPlaceResponse)
	return response.RetTestScalarInPlace_0, nil
}
