// this file was auto generated by gotsrpc https://github.com/foomo/gotsrpc
package demo

import (
	tls "crypto/tls"
	gob "encoding/gob"
	fmt "fmt"
	gotsrpc "github.com/foomo/gotsrpc"
	nested "github.com/foomo/gotsrpc/demo/nested"
	gorpc "github.com/valyala/gorpc"
	reflect "reflect"
	strings "strings"
	time "time"
)

type (
	ServiceGoRPCProxy struct {
		server           *gorpc.Server
		service          *Service
		callStatsHandler *gotsrpc.GoRPCCallStatsHandlerFun
	}

	ExtractAddressRequest struct {
		Person *Person
	}
	ExtractAddressResponse struct {
		Addr *Address
		E    *Err
	}

	GiveMeAScalarRequest struct {
	}
	GiveMeAScalarResponse struct {
		Amount nested.Amount
		Wahr   nested.True
		Hier   ScalarInPlace
	}

	HelloRequest struct {
		Name string
	}
	HelloResponse struct {
		Reply string
		Err   *Err
	}

	NestRequest struct {
	}
	NestResponse struct {
		RetNest_0 *nested.Nested
	}

	TestScalarInPlaceRequest struct {
	}
	TestScalarInPlaceResponse struct {
		RetTestScalarInPlace_0 ScalarInPlace
	}
)

func init() {
	gob.Register(ExtractAddressRequest{})
	gob.Register(ExtractAddressResponse{})
	gob.Register(GiveMeAScalarRequest{})
	gob.Register(GiveMeAScalarResponse{})
	gob.Register(HelloRequest{})
	gob.Register(HelloResponse{})
	gob.Register(NestRequest{})
	gob.Register(NestResponse{})
	gob.Register(TestScalarInPlaceRequest{})
	gob.Register(TestScalarInPlaceResponse{})
}

func NewServiceGoRPCProxy(addr string, service *Service, tlsConfig *tls.Config) *ServiceGoRPCProxy {
	proxy := &ServiceGoRPCProxy{
		service: service,
	}

	if tlsConfig != nil {
		proxy.server = gorpc.NewTLSServer(addr, proxy.handler, tlsConfig)
	} else {
		proxy.server = gorpc.NewTCPServer(addr, proxy.handler)
	}

	return proxy
}

func (p *ServiceGoRPCProxy) Start() error {
	return p.server.Start()
}

func (p *ServiceGoRPCProxy) Stop() {
	p.server.Stop()
}

func (p *ServiceGoRPCProxy) SetCallStatsHandler(handler *gotsrpc.GoRPCCallStatsHandlerFun) {
	p.callStatsHandler = handler
}

func (p *ServiceGoRPCProxy) handler(clientAddr string, request interface{}) (response interface{}) {
	start := time.Now()

	reqType := reflect.TypeOf(request).String()
	funcNameParts := strings.Split(reqType, ".")
	funcName := funcNameParts[len(funcNameParts)-1]

	switch funcName {
	case "ExtractAddressRequest":
		req := request.(ExtractAddressRequest)
		addr, e := p.service.ExtractAddress(req.Person)
		response = ExtractAddressResponse{Addr: addr, E: e}
	case "GiveMeAScalarRequest":
		amount, wahr, hier := p.service.GiveMeAScalar()
		response = GiveMeAScalarResponse{Amount: amount, Wahr: wahr, Hier: hier}
	case "HelloRequest":
		req := request.(HelloRequest)
		reply, err := p.service.Hello(req.Name)
		response = HelloResponse{Reply: reply, Err: err}
	case "NestRequest":
		retNest_0 := p.service.Nest()
		response = NestResponse{RetNest_0: retNest_0}
	case "TestScalarInPlaceRequest":
		retTestScalarInPlace_0 := p.service.TestScalarInPlace()
		response = TestScalarInPlaceResponse{RetTestScalarInPlace_0: retTestScalarInPlace_0}
	default:
		fmt.Println("Unkown request type", reflect.TypeOf(request).String())
	}

	if p.callStatsHandler != nil {
		*p.callStatsHandler(gotsrpc.CallStats{
			Func:      funcName,
			Package:   "github.com/foomo/gotsrpc/demo",
			Service:   "Service",
			Execution: time.Since(start),
		})
	}

	return
}
